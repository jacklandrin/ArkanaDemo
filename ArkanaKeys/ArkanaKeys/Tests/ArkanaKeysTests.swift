// DO NOT MODIFY
// Automatically generated by Arkana (https://github.com/rogerluan/arkana)

import Foundation
import ArkanaKeysInterfaces
import XCTest
@testable import ArkanaKeys

final class ArkanaKeysTests: XCTestCase {
    private var salt: [UInt8]!
    private var globalSecrets: ArkanaKeysGlobalProtocol!

    override func setUp() {
        super.setUp()
        salt = [
            0xd2, 0x6a, 0xae, 0x4d, 0xb4, 0x62, 0x1a, 0x49, 0xad, 0xb, 0x41, 0x15, 0xf5, 0x35, 0xf9, 0x22, 0x7, 0x12, 0x8d, 0x10, 0x72, 0x24, 0xd1, 0xfa, 0x86, 0xc1, 0xd7, 0x21, 0xc3, 0xf5, 0xc, 0x20, 0x9b, 0xac, 0x7c, 0x6c, 0x6a, 0x83, 0x4, 0x27, 0x8a, 0x5b, 0xe9, 0x7f, 0x3d, 0x62, 0xec, 0x1a, 0xda, 0xf2, 0x7a, 0xb5, 0x1, 0xc0, 0xdd, 0x3c, 0x53, 0x8b, 0x6f, 0x19, 0xf6, 0xe3, 0xbd, 0xd5
        ]
        globalSecrets = ArkanaKeys.Global()
    }

    override func tearDown() {
        globalSecrets = nil
        salt = nil
        super.tearDown()
    }

    func test_decodeRandomHexKey_shouldDecode() {
        let encoded: [UInt8] = [
            0xe0, 0xb, 0xcb, 0x7b, 0x82, 0x54, 0x79, 0x7f, 0xcc, 0x3a, 0x20, 0x2d, 0x90, 0x51, 0xcf, 0x41, 0x35, 0x77, 0xb8, 0x27, 0x17, 0x12, 0xe3, 0xc2, 0xe5, 0xa3, 0xb6, 0x14, 0xa0, 0x93, 0x3f, 0x13, 0xfe, 0xc9, 0x4a, 0xd, 0x5b, 0xe0, 0x60, 0x15, 0xee, 0x3e, 0x8a, 0x1e, 0x58, 0x5a, 0x89, 0x7b, 0xea, 0x91, 0x1c, 0x85, 0x63, 0xa2, 0xe8, 0x58, 0x6b, 0xbe, 0x59, 0x7c, 0xc7, 0xd1, 0xdc, 0xb4, 0xe1, 0xe, 0xcb, 0x7d, 0x83, 0x51, 0x28, 0x7f, 0x9f, 0x6a, 0x77, 0x24, 0xc2, 0x6, 0xc0, 0x44, 0x62, 0x27, 0xe8, 0x26, 0x47, 0x17, 0xe6, 0xcb, 0xb0, 0xa5, 0xe2, 0x44, 0xf7, 0xc3, 0x3c, 0x46, 0xaa, 0x9e, 0x1e, 0xd, 0xf, 0xb0, 0x60, 0x42, 0xb9, 0x6e, 0xdc, 0x49, 0x5f, 0x4, 0xdf, 0x2a, 0xbf, 0xc6, 0x1b, 0x84, 0x33, 0xa2, 0xe5, 0xc, 0x6b, 0xe8, 0x57, 0x2b, 0x94, 0xd0, 0xde, 0xb7
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "2ae666c6a1a8ed6c2e57e628cba5cf33ee6a1cd2decae8ea0cf0bb5d856e12aa3de073262a61739fe5e653716d5e460f12bae3de3556bf30e4a12b808c82b3cb")
    }

    func test_decodeRandomBase64Key_shouldDecode() {
        let encoded: [UInt8] = [
            0x9c, 0x9, 0xe2, 0x21, 0xdf, 0xb, 0x40, 0, 0xe2, 0x33, 0x10, 0x2d, 0x9e, 0x60, 0xae, 0x16, 0x77, 0x5b, 0xc6, 0x55, 0x4, 0xf, 0xbc, 0xb7, 0xb2, 0xab, 0x82, 0x6a, 0xb9, 0xc1, 0x4a, 0x6b, 0xe3, 0xe0, 0x35, 0x3a, 0x21, 0xd7, 0x31, 0x40, 0xb2, 0x34, 0xbe, 0x3a, 0xc, 0x11, 0xdb, 0x5c, 0x82, 0x9d, 0x4f, 0xc2, 0x46, 0xf5, 0x8e, 0x75, 0x3e, 0xe8, 0x22, 0x71, 0xc4, 0xa8, 0xe5, 0x9c, 0xea, 0x26, 0xfc, 0x18, 0x8d, 0x2e, 0x4f, 0x7d, 0xe6, 0x45, 0x6a, 0x7f, 0x96, 0x7, 0xc8, 0x45, 0x74, 0x22, 0xef, 0x7e, 0x3, 0x53, 0xec, 0xc7
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "NcLlkiZIO8Q8kUW4pIKEv+mM4jUKz4FKxLIVKT5g8oWE1s7FXo5wG5SImcMh2KXI8LRU9LU4KN+jc21gs0bnqw==")
    }

    func test_decodeUUIDKey_shouldDecode() {
        let encoded: [UInt8] = [
            0xeb, 0x59, 0x9c, 0x75, 0x85, 0, 0x2d, 0x2f, 0x80, 0x3e, 0x22, 0x71, 0x91, 0x18, 0xcd, 0x10, 0x61, 0x27, 0xa0, 0x71, 0x13, 0x40, 0xb7, 0xd7, 0xe3, 0xa0, 0xe5, 0x13, 0xa5, 0xc0, 0x6d, 0x12, 0xf9, 0xc8, 0x18, 0x5e
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "93281b7f-5cdd-42f5-aadf-ea22f5a2bdd2")
    }

    func test_decodeTrueBoolValue_shouldDecode() {
        let encoded: [UInt8] = [
            0xa6, 0x18, 0xdb, 0x28
        ]
        XCTAssertTrue(ArkanaKeys.decode(encoded: encoded, cipher: salt))
    }

    func test_decodeFalseBoolValue_shouldDecode() {
        let encoded: [UInt8] = [
            0xb4, 0xb, 0xc2, 0x3e, 0xd1
        ]
        XCTAssertFalse(ArkanaKeys.decode(encoded: encoded, cipher: salt))
    }

    func test_decodeIntValue_shouldDecode() {
        let encoded: [UInt8] = [
            0xe6, 0x58
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), 42)
    }

    func test_decodeIntValueWithLeadingZeroes_shouldDecodeAsString() {
        let encoded: [UInt8] = [
            0xe2, 0x5a, 0x9e, 0x7c
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "0001")
    }

    func test_decodeMassiveIntValue_shouldDecodeAsString() {
        let encoded: [UInt8] = [
            0xeb, 0x58, 0x9c, 0x7e, 0x87, 0x55, 0x28, 0x79, 0x9e, 0x3d, 0x79, 0x20, 0xc1, 0x2, 0xce, 0x17, 0x3f, 0x22, 0xba, 0x29, 0x40, 0x16, 0xe2, 0xc9, 0xb1, 0xf3, 0xe7, 0x12, 0xf5, 0xcd, 0x39, 0x14, 0xac, 0x9b, 0x49, 0x54, 0x5a, 0xb4
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "92233720368547758079223372036854775807")
    }

    func test_decodeNegativeIntValue_shouldDecodeAsString() {
        let encoded: [UInt8] = [
            0xff, 0x5e, 0x9c
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "-42")
    }

    func test_decodeFloatingPointValue_shouldDecodeAsString() {
        let encoded: [UInt8] = [
            0xe1, 0x44, 0x9f, 0x79
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "3.14")
    }

    func test_encodeAndDecodeValueWithDollarSign_shouldDecode() {
        let encoded: [UInt8] = [
            0xa0, 0xf, 0xcf, 0x21, 0xeb, 0x46, 0x76, 0x20, 0xc0, 0x54, 0x32, 0x7d, 0x94, 0x51, 0x80
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "real_$lim_shady")
    }
}
